{"version":3,"sources":["logo.svg","config.js","hash.js","Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","console","log","Player","props","backgroundStyles","backgroundImage","concat","album","images","url","progressBarStyles","width","progress_ms","duration_ms","react_default","a","createElement","className","alt","src","name","artists","is_playing","style","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","getCurrentlyPlaying","bind","assertThisInitialized","_token","access_token","setState","_this2","$","type","beforeSend","xhr","setRequestHeader","success","data","logo","href","join","src_Player_0","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a8d0dd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"4ff33cf0a2bb43deb113db9f1faaee2d\";\nexport const redirectUri = \"http://localhost:3000/redirect\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\nconsole.log(hash);\n\nexport default hash;\n","import React from \"react\";\nimport \"./Player.css\";\n\nconst Player = props => {\n  const backgroundStyles = {\n    backgroundImage:`url(${\n      props.item.album.images[0].url\n    })`,\n  };\n\n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img alt=\"albumimage\" src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{props.item.name}</div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div className=\"progress__bar\" style={progressBarStyles} />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        console.log(data.item.name);\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.progress_ms}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}